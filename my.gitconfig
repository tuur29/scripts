
# TIPS:
# - On windows WSL: `git config --global credential.helper "/mnt/c/Program\\ Files/Git/mingw64/libexec/git-core/git-credential-wincred.exe"`
# - You can include this into your own gitconfig by adding this at the top of yours:
# 	`[include] path = "~/git/scripts/my.gitconfig"`
# - You can include different overrides depending on path:
#   `[includeIf "gitdir/i:~/git/work/**"] path = ~/git/work/.gitconfig_include`
# - When using git-bash and node together, also run:
# 	`npm config set script-shell "C:\\Program Files\\git\\bin\\bash.exe"`

[user]
	name = 
	email = 
	username = 

[core]
	editor = nano
	autocrlf = input
	eol = lf
	excludesfile = ~/.gitignore_global

[diff]
	noprefix = true

[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f

# [rerere]
# 	enabled = true

# [merge]
# 	conflictstyle = diff3

[alias]

	# Shortcuts
	abort = ! git merge --abort | git rebase --abort | git cherry-pick --abort
	branches = branch -av
	branchname = rev-parse --abbrev-ref HEAD
	changedfiles = ! git add . && git diff --cached --stat
	changes = ! sh -c '[ "$0" == "sh" ] && git diff || git show $0'
	cherry = cherry-pick
	commitall = ! git add . && git commit -a -m
	continue = ! git merge --continue | git rebase --continue | git cherry-pick --continue
	details = log -n1 -p --format=fuller
	discard = ! git add . && git reset --hard # git restore does not discard new files
	empty = commit --allow-empty -m 'Trigger with empty commit'
	history = log --compact-summary --
	ignore = update-index --assume-unchanged
	pick = cherry-pick
	please = push --force-with-lease
	pushnew = push -u origin HEAD
	stash = stash -u
	tags = tag -l
	undo = reset --soft HEAD~1
	unlock = ! rm -f .git/index.lock 
	unignore = update-index --no-assume-unchanged

	# Functions
	alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ / | grep --color=always -E '^[^=]+=' | less -S -R
	amend = ! git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend --no-edit
	changelog = log --graph --all --date=local --name-status --format=format:'%C(cyan)%h%C(reset) - %C(red)%d%C(reset) - %C(white)(%ai)%C(reset) %C(white dim)%s%C(reset) %C(white) -- %an%C(reset)' --abbrev-commit --color
	countchanges = ! git log --all -M -C --name-only --format='format:' "$@" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print "count,file"} {print $1 "," $2}' | less
	fullreset = ! git fetch origin && git reset --hard @{u}
	graph = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
	bulkbranchrem = ! sh -c 'git branch | grep $1 | xargs git branch -D' -
	syncfork = ! git fetch upstream && git merge upstream/$(git branchname)
	todo = "!git diff ${1:-develop} | grep -i -E '^\\+.*(TODO.*)|\\+\\+\\+' | sed 's/^.*\\(TODO.*\\).*$/     - \\1/' | sed -e '/\\+\\+\\+.*/{ h; d; }; H; x; s/\\+\\+\\+/\\n/g;' | sed '$!N; /^\\(.*\\)\\n\\1$/!P; D' | grep --color -i -E '^|TODO:' #"
	rewrite = ! sh -c 'git rebase -i HEAD~$1' -
	onto = ! sh -c 'echo Current HEAD hash: $(git rev-parse HEAD) && git rebase --onto $1' -
	quickpull = ! sh -c 'sh -c \"echo qpltmp > qpltmp && git add . && git stash push -- && git checkout $2 && git pull && git checkout $1 && git stash pop && rm -f qpltmp && git add qpltmp\"' - $(git branchname)

	# Abbreviations
	g = ! git
	br = branch -vv
	brd = branch -D
	c = checkout
	cb = checkout -B
	cm = commit -m
	cma = ! git commitall
	d = ! git checkout develop && git fetch && git pull
	f = fetch --all --prune
	pl = pull
	ps = push
	pn = ! git pushnew
	st = status --short --branch
	qpl = ! git quickpull

	# Helpers
	quote-string = "!read -r l; printf \\\"!; printf %s \"$l\" | sed 's/\\([\\\"]\\)/\\\\\\1/g'; printf \" #\\\"\\n\" #"
	quote-string-undo = "!read -r l; printf %s \"$l\" | sed 's/\\\\\\([\\\"]\\)/\\1/g'; printf \"\\n\" #"
